// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: github.com/microhq/auth-srv/proto/oauth2/oauth2.proto

/*
Package go_micro_srv_auth_oauth2 is a generated protocol buffer package.

It is generated from these files:
	github.com/microhq/auth-srv/proto/oauth2/oauth2.proto

It has these top-level messages:
	Token
	AuthorizeRequest
	AuthorizeResponse
	TokenRequest
	TokenResponse
	RevokeRequest
	RevokeResponse
	IntrospectRequest
	IntrospectResponse
*/
package go_micro_srv_auth_oauth2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	api "github.com/micro/go-api"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Oauth2 service

type Oauth2Service interface {
	Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error)
	Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
	Revoke(ctx context.Context, in *RevokeRequest, opts ...client.CallOption) (*RevokeResponse, error)
	Introspect(ctx context.Context, in *IntrospectRequest, opts ...client.CallOption) (*IntrospectResponse, error)
}

type oauth2Service struct {
	c    client.Client
	name string
}

func NewOauth2Service(name string, c client.Client) Oauth2Service {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.auth.oauth2"
	}
	return &oauth2Service{
		c:    c,
		name: name,
	}
}

func (c *oauth2Service) Authorize(ctx context.Context, in *AuthorizeRequest, opts ...client.CallOption) (*AuthorizeResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth2.Authorize", in)
	out := new(AuthorizeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) Token(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth2.Token", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) Revoke(ctx context.Context, in *RevokeRequest, opts ...client.CallOption) (*RevokeResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth2.Revoke", in)
	out := new(RevokeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) Introspect(ctx context.Context, in *IntrospectRequest, opts ...client.CallOption) (*IntrospectResponse, error) {
	req := c.c.NewRequest(c.name, "Oauth2.Introspect", in)
	out := new(IntrospectResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Oauth2 service

type Oauth2Handler interface {
	Authorize(context.Context, *AuthorizeRequest, *AuthorizeResponse) error
	Token(context.Context, *TokenRequest, *TokenResponse) error
	Revoke(context.Context, *RevokeRequest, *RevokeResponse) error
	Introspect(context.Context, *IntrospectRequest, *IntrospectResponse) error
}

func RegisterOauth2Handler(s server.Server, hdlr Oauth2Handler, opts ...server.HandlerOption) error {
	type oauth2 interface {
		Authorize(ctx context.Context, in *AuthorizeRequest, out *AuthorizeResponse) error
		Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error
		Revoke(ctx context.Context, in *RevokeRequest, out *RevokeResponse) error
		Introspect(ctx context.Context, in *IntrospectRequest, out *IntrospectResponse) error
	}
	type Oauth2 struct {
		oauth2
	}
	h := &oauth2Handler{hdlr}
	return s.Handle(s.NewHandler(&Oauth2{h}, opts...))
	return s.Handle(s.NewHandler(&Oauth2{h}, opts...))
	return s.Handle(s.NewHandler(&Oauth2{h}, opts...))
	return s.Handle(s.NewHandler(&Oauth2{h}, opts...))
}

type oauth2Handler struct {
	Oauth2Handler
}

func (h *oauth2Handler) Authorize(ctx context.Context, in *AuthorizeRequest, out *AuthorizeResponse) error {
	return h.Oauth2Handler.Authorize(ctx, in, out)
}

func (h *oauth2Handler) Token(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.Oauth2Handler.Token(ctx, in, out)
}

func (h *oauth2Handler) Revoke(ctx context.Context, in *RevokeRequest, out *RevokeResponse) error {
	return h.Oauth2Handler.Revoke(ctx, in, out)
}

func (h *oauth2Handler) Introspect(ctx context.Context, in *IntrospectRequest, out *IntrospectResponse) error {
	return h.Oauth2Handler.Introspect(ctx, in, out)
}
